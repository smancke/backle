--
-- Table structure for table user
--

DROP TABLE IF EXISTS item;
DROP TABLE IF EXISTS user_project;
DROP TABLE IF EXISTS user_user;
DROP TABLE IF EXISTS backlog;
DROP TABLE IF EXISTS project;
DROP TABLE IF EXISTS session;
DROP TABLE IF EXISTS "user";

CREATE TABLE "user" (
  id SERIAL,
  displayname varchar(50) NOT NULL,
  origin varchar(20) DEFAULT NULL,
  external_id varchar(50) NOT NULL,
  email varchar(200) DEFAULT NULL,
  image_url varchar(300) DEFAULT NULL,
  created timestamp NOT NULL,
  last_login timestamp NULL DEFAULT NULL,
  PRIMARY KEY (id),
  UNIQUE (origin,external_id)
);


--
-- Table structure for table project
--

CREATE TABLE project (
  id SERIAL,
  name varchar(30) NOT NULL UNIQUE,
  title varchar(200) NOT NULL,
  created timestamp NOT NULL,
  is_public_viewable int NOT NULL DEFAULT '1',
  PRIMARY KEY (id)
);

--
-- Table structure for table backlog
--

CREATE TABLE backlog (
  id SERIAL,
  backlogname varchar(50) NOT NULL,
  backlogtitle varchar(200) DEFAULT NULL,
  is_public_viewable int NOT NULL DEFAULT '1',
  owner_id int NOT NULL,
  project_id int DEFAULT NULL,
  created timestamp NOT NULL,
  is_project_default int NOT NULL,
  PRIMARY KEY (id),
  UNIQUE (backlogname,project_id),
  CONSTRAINT backlog_ibfk_1 FOREIGN KEY (owner_id) REFERENCES "user" (id),
  CONSTRAINT backlog_ibfk_2 FOREIGN KEY (project_id) REFERENCES project (id) ON DELETE SET NULL ON UPDATE CASCADE
);

DROP TYPE IF EXISTS item_type;
CREATE TYPE item_type AS ENUM ('story','milestone');
DROP TYPE IF EXISTS item_status;
CREATE TYPE item_status AS ENUM ('open','done');
--
-- Table structure for table item
--
CREATE TABLE item (
  id SERIAL,
  backlog_id int NOT NULL,
  author_id int NOT NULL,
  type item_type NOT NULL DEFAULT 'story',
  status item_status NOT NULL DEFAULT 'open',
  backlogorder int NOT NULL,
  title varchar(400) DEFAULT NULL,
  text varchar(400) DEFAULT NULL,
  detail text,
  points int DEFAULT NULL,
  created timestamp NOT NULL,
  changed timestamp DEFAULT NULL,
  done timestamp DEFAULT NULL,
  PRIMARY KEY (id),
  CONSTRAINT item_ibfk_1 FOREIGN KEY (backlog_id) REFERENCES backlog (id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT item_ibfk_2 FOREIGN KEY (author_id) REFERENCES "user" (id)
);


--
-- Table structure for table session
--

CREATE TABLE session (
  sessionid varchar(50) NOT NULL,
  created timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  expiration timestamp NOT NULL,
  user_id int NOT NULL,
  PRIMARY KEY (sessionid),
  CONSTRAINT session_ibfk_1 FOREIGN KEY (user_id) REFERENCES "user" (id) ON DELETE CASCADE
);

--
-- Table structure for table user_project
--

CREATE TABLE user_project (
  user_id int NOT NULL,
  project_id int NOT NULL,
  is_owner int NOT NULL,
  can_write int NOT NULL,
  created timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (user_id,project_id),
  CONSTRAINT user_project_ibfk_1 FOREIGN KEY (user_id) REFERENCES "user" (id) ON DELETE CASCADE,
  CONSTRAINT user_project_ibfk_2 FOREIGN KEY (project_id) REFERENCES project (id) ON DELETE CASCADE
);

--
-- Table structure for table user_user
--

CREATE TABLE user_user (
  self_id int NOT NULL,
  friend_id int NOT NULL,
  created timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT user_user_ibfk_1 FOREIGN KEY (self_id) REFERENCES "user" (id) ON DELETE CASCADE,
  CONSTRAINT user_user_ibfk_2 FOREIGN KEY (friend_id) REFERENCES "user" (id) ON DELETE CASCADE
);
